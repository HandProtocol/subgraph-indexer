# scorer

type User @entity {
  id: ID! # Address of the user
  scores: [Score!] @derivedFrom(field: "user") # List of scores
  totalScore: BigInt! # Sum of all scores
  createdAt: BigInt! # Timestamp when the user was created
  donations: [Donation!] @derivedFrom(field: "user") # List of donated tokens
  allocations: [Allocation!] @derivedFrom(field: "user") # Allocation history
}

type Score @entity {
  id: ID! # Combination of user address + scoreType
  user: User! # Relationship to User
  scoreType: String! # Type of the score
  value: BigInt! # Score value
}

type ScoreType @entity {
  id: ID! # The name of the score type
}

type Admin @entity {
  id: ID! # Address of the admin
  appointedAt: BigInt! # Timestamp when the admin was appointed
}

type Round @entity {
  id: ID! # Unique identifier for the round
  start: BigInt! # Start timestamp
  end: BigInt! # End timestamp
  metadataURI: RoundMetadata! # IPFS URI for round metadata
  allocatedTokens: [AllocatedToken!] @derivedFrom(field: "round") # Allocated tokens in this round
  claimedTokens: [ClaimedToken!] @derivedFrom(field: "round") # Claimed tokens in this round
  name: String! # Name of the round
  description: String! # Description of the round
  logo: String! # Logo of the round
  banner: String! # Banner of the round
  createdAt: BigInt! # Timestamp when the round was created
}

type RoundMetadata @entity {
  id: ID! # ipfs CID
  name: String! # Name of the round
  description: String! # Description of the round
  image: String # Logo of the round
  external_url: String
}

type Donation @entity {
  id: ID! # Unique identifier (user + token + timestamp)
  user: User! # The user who donated
  token: String! # Token contract address (or "ETHER" for Ether)
  amount: BigInt! # Amount donated
  timestamp: BigInt! # Block timestamp of the donation
}

type Allocation @entity {
  id: ID! # Unique identifier (user + token + round)
  user: User! # The user to whom tokens are allocated
  token: String! # Token contract address (or "ETHER" for Ether)
  amount: BigInt! # Amount allocated
  status: AllocationStatus! # Claimed, Pending, or Unclaimed
  round: Round! # Round associated with this allocation
  timestamp: BigInt! # Block timestamp of the allocation
}

type AllocatedToken @entity {
  id: ID! # Unique identifier (round + token)
  round: Round! # The round associated with the allocation
  token: String! # Token contract address (or "ETHER" for Ether)
  amount: BigInt! # Amount allocated
}

type ClaimedToken @entity {
  id: ID! # Unique identifier (round + user + token)
  round: Round! # The round in which the claim was made
  user: User! # The user who claimed the tokens
  token: String! # Token contract address (or "ETHER" for Ether)
  amount: BigInt! # Amount claimed
  timestamp: BigInt! # Block timestamp of the claim
}

enum AllocationStatus {
  CLAIMED
  PENDING
  UNCLAIMED
}

type GlobalStats @entity {
  id: ID! # Static ID for a singleton entity
  totalClaimed: BigInt! # Total amount of tokens claimed through all rounds
  uniqueClaimers: BigInt! # Total number of unique addresses that have claimed tokens
}

type TokenBalance @entity {
  id: ID! # Token address (or "ETHER" for Ether)
  token: String! # Token contract address (or "ETHER" for Ether)
  amount: BigInt! # Total amount in the contract
}
